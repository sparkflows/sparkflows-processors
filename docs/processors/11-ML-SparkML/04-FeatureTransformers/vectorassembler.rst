Vector Assembler
=========== 

Merges multiple columns into a vector column

Input
--------------
It takes in a DataFrame and transforms it to another DataFrame

Output
--------------
It adds a new column to the incoming DataFrame. The new column contains the values of the input columns concatenated into a vector in the specified order.

Type
--------- 

ml-transformer

Class
--------- 

fire.nodes.ml.NodeVectorAssembler

Fields
--------- 

.. list-table::
      :widths: 10 5 10
      :header-rows: 1

      * - Name
        - Title
        - Description
      * - inputCols
        - Input Columns
        - Input column of type - all numeric, boolean and vector
      * - outputCol
        - Output Column
        - Output column name
      * - handleInvalid
        - HandleInvalid
        - How to handle invalid data (NULL values). Options are 'skip' (filter out rows with invalid data), 'error' (throw an error), or 'keep' (return relevant number of NaN in the output).


Details
-------


VectorAssembler is a transformer that combines a given list of columns into a single vector column. 
It is useful for combining raw features and features generated by different feature transformers into a single feature vector, in order to train ML models like logistic regression and decision trees. 
VectorAssembler accepts the following input column types: all numeric types, boolean type, and vector type. In each row, the values of the input columns will be concatenated into a vector in the specified order.

More details are available at:

https://spark.apache.org/docs/latest/ml-features.html#vectorassembler


Examples
-------


The below example is available at : https://spark.apache.org/docs/latest/ml-features.html#vectorassembler
+++++++++++++++

import org.apache.spark.ml.feature.VectorAssembler
import org.apache.spark.ml.linalg.Vectors

val dataset = spark.createDataFrame(
  Seq((0, 18, 1.0, Vectors.dense(0.0, 10.0, 0.5), 1.0))
).toDF("id", "hour", "mobile", "userFeatures", "clicked")

val assembler = new VectorAssembler()
  .setInputCols(Array("hour", "mobile", "userFeatures"))
  .setOutputCol("features")

val output = assembler.transform(dataset)
println("Assembled columns 'hour', 'mobile', 'userFeatures' to vector column 'features'")
output.select("features", "clicked").show(false)
